// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package scanerr

import (
	"github.com/libmonsoon-dev/scanerr/config"
	"github.com/libmonsoon-dev/scanerr/internal/cache"
	"github.com/libmonsoon-dev/scanerr/internal/scanerr"
	"github.com/libmonsoon-dev/scanerr/internal/source/ast"
	"github.com/libmonsoon-dev/scanerr/internal/source/packages"
	"github.com/libmonsoon-dev/scanerr/internal/unfmt"
)

// Injectors from scanerr.go:

func NewScanerr(appConfig config.AppConfig) *scanerr.Scanner {
	cacheConfig := appConfig.CacheConfig
	packagesLoader := newPackageLoader(cacheConfig)
	stringsExtractorConfig := appConfig.StringsExtractorConfig
	astStringExtractorFactory := newASTStringsExtractor(cacheConfig)
	sourceStringsExtractor := newPackagesStringsExtractor(stringsExtractorConfig, astStringExtractorFactory)
	stringsMatcher := unfmt.NewStringsMatcher()
	scanner := scanerr.NewScanner(packagesLoader, sourceStringsExtractor, stringsMatcher)
	return scanner
}

// scanerr.go:

func newPackageLoader(cacheConfig config.CacheConfig) (l scanerr.PackagesLoader) {
	l = packages.NewLoader()

	if cacheConfig.UseLoaderCache {
		l = cache.NewPackageLoader(l)
	}

	return
}

func newPackagesStringsExtractor(conf config.StringsExtractorConfig, factory packages.ASTStringExtractorFactory) scanerr.SourceStringsExtractor {
	if conf.NumWorkers > 1 {
		return packages.NewConcurrentStringsExtractor(conf, factory)
	}
	return packages.NewStringsExtractor(factory)
}

func newASTStringsExtractor(cacheConfig config.CacheConfig) (f packages.ASTStringExtractorFactory) {
	f = ast.NewStringExtractorFactory()

	if cacheConfig.UseStringsExtractorCache {
		f = cache.NewStringExtractorFactory(f)
	}
	return
}
